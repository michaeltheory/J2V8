apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.eclipsesource.j2v8'
archivesBaseName = 'j2v8'
version = System.getenv('J2V8_FULL_VERSION')

ext."signing.secretKeyRingFile" = '/.gnupg/secring.gpg'
ext."signing.password" = System.getenv("KEYSTORE_PASSWORD")
ext."signing.keyId" = System.getenv("KEY_ID")

configurations {
    archives {
        extendsFrom configurations.default
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'spoon'

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
    //testCompile 'org.mockito:mockito-all:2.6.3'
    testCompile 'org.mockito:mockito-core:2.6.3'

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-android:2.6.3' // https://jeroenmols.com/blog/2017/01/17/mockitoandroid/
    androidTestCompile 'com.android.support:support-annotations:24.0.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}

android {
    compileSdkVersion 10
    buildToolsVersion '24.0.3'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 10

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['src/test']
        }

        // androidTest.setRoot('src/test')
    }

}

// see: https://github.com/square/spoon
spoon {
    // for debug output
    debug = true

    // To run only specified test classes
    if (project.hasProperty('testClass')) {
        className = project.testClass
    }

    // To run a single method in TestCase
    if (project.hasProperty('testMethod')) {
        methodName = project.testMethod
    }
}

signing {
    // required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    //sign configurations.archives
}

uploadArchives {

}
